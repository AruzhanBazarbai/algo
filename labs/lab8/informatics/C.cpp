// /*
// Задача №164 Обход графа
// Дан неориентированный невзвешенный граф. Для него вам необходимо найти 
// количество вершин, лежащих в одной компоненте связности с данной вершиной 
// (считая эту вершину).

// Входные данные
// В первой строке входных данных содержатся два числа: N и S 
// (1 ≤ N ≤ 100; 1 ≤ S ≤ N), где N – количество вершин графа, 
// а S – заданная вершина. В следующих N строках записано по N чисел – 
// матрица смежности графа, в которой 0 означает отсутствие ребра между 
// вершинами, а 1 – его наличие. Гарантируется, что на главной диагонали 
// матрицы всегда стоят нули.

// Выходные данные
// Выведите одно целое число – искомое количество вершин.
// */
#include <iostream>
using namespace std;
#define MXN 100
bool used[MXN];
int a[MXN][MXN];
int n,cnt=1;
// done
void dfs(int v){
    used[v]=true;
    for(int j=0;j<n;j++){
        if(a[v][j]==1 && !used[j]){
            cnt++;
            dfs(j);
        }
    }
}
int main(){
    int x;
    cin >> n >> x;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cin >> a[i][j];
        }
    }
    dfs(x-1);
    cout << cnt << endl;


    return 0;
}