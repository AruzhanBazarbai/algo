// /*
// Задача №177. Издевательство
// Максимальное время работы на одном тесте:	1 секунда

// В городе N площадей. Любые две площади соединены между собой ровно одной дорогой с двусторонним движением. В этом городе живет Штирлиц. 
// У Штирлица есть хобби - он любит воскресным утром выйти из дома, сесть в машину, выбрать какой-нибудь кольцевой маршрут,
//  проходящий ровно по трем площадям (то есть сначала он едет с какой-то площади на какую-то другую, потом - на третью, 
//  затем возвращается на начальную, и опять едет по этому маршруту). Он воображает, что где-то на этом пути стоит Борман. 
//  И так вот ездит Штирлиц все воскресенье, пока голова не закружится, и радуется...

// Естественно, что Штирлицу хочется проезжать мимо точки, в которой, как он воображает, стоит Борман, как можно чаще. Для этого, 
// естественно, выбранный Штирлицем маршрут должен быть как можно короче. Напишите программу, которая выберет оптимальный для Штирлица 
// маршрут.

// Входные данные
// В первой строке задается  число N (3 <= N <= 100). В последующих строках содержится матрица NxN расстояний между площадями 
// (число в позиции i,j обозначает длину дороги, соединяющей i-ую и j-ую площади). Все числа в матрице (кроме стоящих на главной 
// диагонали) - натуральные, не превышающие 1000. Матрица симметрична относительно главной диагонали, на главной диагонали стоят 0.

// Выходные данные
// Требуется вывести три числа — номера площадей в оптимальном маршруте. Если маршрутов несколько, выведите любой из них.
// */
#include <iostream>
#include <vector>
using namespace std;
// done
int g[100][100];
int used[100];
int color[100];


int main(){
    int n;
    cin >> n;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            cin >> g[i][j];
        }
    }
    vector<int> ans(3);
    int mini=1e7;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(i==j) continue;
            for(int k=1;k<=n;k++){
                if(j==k || k==i) continue;
                if(g[i][j] && g[k][j] && g[i][k] && (g[i][j]+g[j][k]+g[i][k])<mini){
                    mini=g[i][j]+g[j][k]+g[i][k];
                    ans[0]=i;
                    ans[1]=j;
                    ans[2]=k;
                }
            }
        }
    }
    for(int x: ans) cout << x <<" ";
    
    return 0;
}