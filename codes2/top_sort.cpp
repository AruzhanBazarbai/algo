// /*
// Задача №166. Построение
// Группа солдат-новобранцев прибыла в армейскую часть N666. После знакомства с прапорщиком стало очевидно, 
// что от работ на кухне по очистке картофеля спасти солдат может только чудо.

// Прапорщик, будучи не в состоянии запомнить фамилии, пронумеровал новобранцев от 1 до N. После этого он велел им 
// построиться по росту (начиная с самого высокого). С этой несложной задачей могут справиться даже совсем необученные новобранцы, 
// да вот беда, прапорщик уверил себя, что знает про некоторых солдат, кто из них кого выше, и это далеко не всегда соответствует истине.

// После трех дней обучения новобранцам удалось выяснить, что знает (а точнее, думает, что знает) прапорщик. Помогите им, 
// используя эти знания, построиться так, чтобы товарищ прапорщик остался доволен.

// Входные данные
// Сначала на вход программы поступают числа N и M (1 < N <= 100, 1 <= M <= 5000) – количество солдат в роте и количество пар солдат, 
// про которых прапорщик знает, кто из них выше. Далее идут эти пары чисел A и B по одной на строке (1 <= A,B <= N), что означает, что, 
// по мнению прапорщика, солдат A выше, чем B. Не гарантируется, что все пары чисел во входных данных различны.

// Выходные данные
// В первой строке выведите "Yes" (если можно построиться так, чтобы прапорщик остался доволен) или "No" (если нет). 
// После ответа "Yes" на следующей строке выведите N чисел, разделенных пробелами, - одно из возможных построений.
// 4 4
// 1 2
// 2 3
// 3 4
// 1 4
// Yes
// 1 2 3 4
// */
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
// done
int cycle_start,cycle_end;
int n,m,x,y;
int used[105];
int cycle_used[105];
int a[105][105];
vector<int> g[105];
vector<int> ans;

bool cycle_find(int v){
    cycle_used[v]=1;
    for(int i=0;i<g[v].size();i++){
        int y=g[v][i];

        if(cycle_used[y]==0){
            if(cycle_find(y)) return true;

        }else if(cycle_used[y]==1){
            cycle_start=y;
            cycle_end=v;
            return true;
        }
    }
    cycle_used[v]=2;
    return false;
    
}

void dfs(int v){ 
    used[v]=1;
    for(int i=0;i<g[v].size();i++){
        int y=g[v][i]; 
        if(used[y]==0){ 
            dfs(y);
        }
    }
    ans.push_back(v);
}

void top_sort(){
    for(int i=1;i<=n;i++){ 
        if(!used[i]){
            dfs(i);
        }
    }
    reverse(ans.begin(),ans.end());
}


int main(){ 
    cin >> n >> m;
    for(int i=0;i < m;i++){
        cin >> x >> y;
        g[x].push_back(y);
        
    }
    
    cycle_start=-1;
    for(int i=1;i<=n;i++){
        if(cycle_find(i)){  
            break;
        } 
    }
    if(cycle_start==-1){
        cout << "Yes" << endl;
        top_sort();
        for(int x : ans) cout << x << " ";
    }else{
        cout << "No" << endl;
    }
    
    
    
    
    return 0;
}
